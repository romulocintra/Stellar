/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import 'ionicons';
import '@stencil/router';
import {
  HighchartsModel,
} from './components/chart/options';
import {
  LocationSegments,
  RouterHistory,
} from '@stencil/router';


export namespace Components {

  interface StellarAccordion {
    'label': string;
    'name': string;
    'open': boolean;
    'refresh': () => void;
    'tight': boolean;
  }
  interface StellarAccordionAttributes extends StencilHTMLAttributes {
    'label'?: string;
    'name'?: string;
    'open'?: boolean;
    'tight'?: boolean;
  }

  interface StellarAsset {
    'align': string;
    'ariaLabel': string;
    'block': boolean;
    'language': string;
    'name': string;
    'src': string;
  }
  interface StellarAssetAttributes extends StencilHTMLAttributes {
    'align'?: string;
    'ariaLabel'?: string;
    'block'?: boolean;
    'language'?: string;
    'name'?: string;
    'src'?: string;
  }

  interface StellarAvatar {
    'color': string;
    'initials': string;
    'name': string;
    'processing': boolean;
    'shape': "circle"|"square"|"rectangle"|"diamond"|"hexagon"|"star"|"message";
    'size': string;
    'src': string;
    'tooltip': boolean;
  }
  interface StellarAvatarAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'initials'?: string;
    'name'?: string;
    'processing'?: boolean;
    'shape'?: "circle"|"square"|"rectangle"|"diamond"|"hexagon"|"star"|"message";
    'size'?: string;
    'src'?: string;
    'tooltip'?: boolean;
  }

  interface StellarBlur {
    'horizontal': number;
    'setBlurFilter': () => void;
    'vertical': number;
  }
  interface StellarBlurAttributes extends StencilHTMLAttributes {
    'horizontal'?: number;
    'vertical'?: number;
  }

  interface StellarBreadcrumb {
    'color': string;
    'disabled': boolean;
    'first': boolean;
    'href': string;
    'label': string;
    'last': boolean;
    'target': string;
  }
  interface StellarBreadcrumbAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'disabled'?: boolean;
    'first'?: boolean;
    'href'?: string;
    'label'?: string;
    'last'?: boolean;
    'target'?: string;
  }

  interface StellarBreadcrumbs {
    'color': string;
    'description': string;
    'home': string;
    'icon': string;
    'icon_size': number;
    'icon_src': string;
    'label': string;
  }
  interface StellarBreadcrumbsAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'description'?: string;
    'home'?: string;
    'icon'?: string;
    'icon_size'?: number;
    'icon_src'?: string;
    'label'?: string;
  }

  interface StellarButton {
    /**
    * Sets the button or link as an active state.
    */
    'active': boolean;
    /**
    * Sets the button or link to render at full width to the parent.
    */
    'block': boolean;
    /**
    * Sets the button or link to provide the affordance of a dangerous action.
    */
    'danger': boolean;
    /**
    * Sets the button or link as disabled and not-interactable.
    */
    'disabled': boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for': string;
    'ghost': boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'href': string;
    /**
    * Sets the button or link as a button with only an icon.
    */
    'icon': boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'invert': boolean;
    /**
    * Sets accessibility options on the buttons
    */
    'label': string;
    /**
    * Sets the name on the button if the button is an input. Allows the button to act as an item in a form.
    */
    'name': string;
    /**
    * Sets the button or link as an outlined button.
    */
    'outline': boolean;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding': string|"small"|"medium"|"large";
    /**
    * Sets the button or link to render as a pill.
    */
    'pill': boolean;
    /**
    * Sets the button or link as processing when clicked.
    */
    'processable': boolean;
    /**
    * Sets the size of the button. Can be tiny, small, medium, or large.
    */
    'size': string|"tiny"|"small"|"medium"|"large";
    /**
    * Allows the button to render for different tags.
    */
    'tag': "button"|"submit"|"link"|"span"|"route-link";
    /**
    * Sets the target on the anchor tag if the button is a link.
    */
    'target': string;
    /**
    * Sets the value on the button if the button is an input.
    */
    'value': string;
  }
  interface StellarButtonAttributes extends StencilHTMLAttributes {
    /**
    * Sets the button or link as an active state.
    */
    'active'?: boolean;
    /**
    * Sets the button or link to render at full width to the parent.
    */
    'block'?: boolean;
    /**
    * Sets the button or link to provide the affordance of a dangerous action.
    */
    'danger'?: boolean;
    /**
    * Sets the button or link as disabled and not-interactable.
    */
    'disabled'?: boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for'?: string;
    'ghost'?: boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'href'?: string;
    /**
    * Sets the button or link as a button with only an icon.
    */
    'icon'?: boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'invert'?: boolean;
    /**
    * Sets accessibility options on the buttons
    */
    'label'?: string;
    /**
    * Sets the name on the button if the button is an input. Allows the button to act as an item in a form.
    */
    'name'?: string;
    /**
    * Sets the button or link as an outlined button.
    */
    'outline'?: boolean;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding'?: string|"small"|"medium"|"large";
    /**
    * Sets the button or link to render as a pill.
    */
    'pill'?: boolean;
    /**
    * Sets the button or link as processing when clicked.
    */
    'processable'?: boolean;
    /**
    * Sets the size of the button. Can be tiny, small, medium, or large.
    */
    'size'?: string|"tiny"|"small"|"medium"|"large";
    /**
    * Allows the button to render for different tags.
    */
    'tag'?: "button"|"submit"|"link"|"span"|"route-link";
    /**
    * Sets the target on the anchor tag if the button is a link.
    */
    'target'?: string;
    /**
    * Sets the value on the button if the button is an input.
    */
    'value'?: string;
  }

  interface StellarCallout {
    'type': "alert"|"error"|"info"|"success"|"default";
  }
  interface StellarCalloutAttributes extends StencilHTMLAttributes {
    'type'?: "alert"|"error"|"info"|"success"|"default";
  }

  interface StellarCard {
    'flip_card': (e?: UIEvent) => Promise<void>;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'flip_icon': string;
    /**
    * Let's a card be flippable
    */
    'flippable': boolean;
    /**
    * Renders a flipped card
    */
    'flipped': boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for': string;
    /**
    * Sets the href if the card is a link.
    */
    'href': string;
    /**
    * Sets the name if the card is a button.
    */
    'name': string;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding': string|"small"|"medium"|"large";
    /**
    * Renders a shadow on the card
    */
    'shadow': string|"light"|"medium"|"heavy";
    /**
    * Sets the element to render the card as - an anchor tag, a button, or a div.
    */
    'tag': "stencil-route-link"|"a"|"button"|"div";
    'transition': boolean;
    /**
    * Sets the element to render the card as - an anchor tag, a button, or a div.
    */
    'type': string;
    /**
    * Sets the value if the card is a button.
    */
    'value': string;
  }
  interface StellarCardAttributes extends StencilHTMLAttributes {
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'flip_icon'?: string;
    /**
    * Let's a card be flippable
    */
    'flippable'?: boolean;
    /**
    * Renders a flipped card
    */
    'flipped'?: boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for'?: string;
    /**
    * Sets the href if the card is a link.
    */
    'href'?: string;
    /**
    * Sets the name if the card is a button.
    */
    'name'?: string;
    'onFlip'?: (event: CustomEvent) => void;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding'?: string|"small"|"medium"|"large";
    /**
    * Renders a shadow on the card
    */
    'shadow'?: string|"light"|"medium"|"heavy";
    /**
    * Sets the element to render the card as - an anchor tag, a button, or a div.
    */
    'tag'?: "stencil-route-link"|"a"|"button"|"div";
    'transition'?: boolean;
    /**
    * Sets the element to render the card as - an anchor tag, a button, or a div.
    */
    'type'?: string;
    /**
    * Sets the value if the card is a button.
    */
    'value'?: string;
  }

  interface StellarChart {
    'config': HighchartsModel;
    'for': string;
    'get_options': () => any;
    'options': (newOptions: any) => void;
    'refresh': () => void;
    'remote': string;
    'type': "area"|"areaspline"|"bar"|"bubble"|"column"|"line"|"pie"|"polygon"|"scatter"|"spline"|"waterfall";
  }
  interface StellarChartAttributes extends StencilHTMLAttributes {
    'config'?: HighchartsModel;
    'for'?: string;
    'remote'?: string;
    'type'?: "area"|"areaspline"|"bar"|"bubble"|"column"|"line"|"pie"|"polygon"|"scatter"|"spline"|"waterfall";
  }

  interface StellarCode {
    'clipboard': () => Promise<void>;
    'codeString': string;
    'copy': boolean;
    'expandable': boolean;
    'expanded': boolean;
    'feature': boolean;
    'highlight': () => void;
    'language': string;
    'preview': boolean;
    'result': () => Promise<string>;
    'setCode': (code: any) => void;
    'simple': boolean;
  }
  interface StellarCodeAttributes extends StencilHTMLAttributes {
    'codeString'?: string;
    'copy'?: boolean;
    'expandable'?: boolean;
    'expanded'?: boolean;
    'feature'?: boolean;
    'language'?: string;
    'preview'?: boolean;
    'simple'?: boolean;
  }

  interface StellarColorPicker {
    'val': string;
  }
  interface StellarColorPickerAttributes extends StencilHTMLAttributes {
    'onChange'?: (event: CustomEvent) => void;
    'val'?: string;
  }

  interface StellarComment {
    'content': any;
    'name': any;
  }
  interface StellarCommentAttributes extends StencilHTMLAttributes {
    'content'?: any;
    'name'?: any;
  }

  interface StellarComments {}
  interface StellarCommentsAttributes extends StencilHTMLAttributes {}

  interface StellarContent {
    'behavior': string;
    'for': string;
    'name': string;
    'open': boolean;
  }
  interface StellarContentAttributes extends StencilHTMLAttributes {
    'behavior'?: string;
    'for'?: string;
    'name'?: string;
    'open'?: boolean;
  }

  interface CopyWrap {
    'align': string;
    'full': boolean;
  }
  interface CopyWrapAttributes extends StencilHTMLAttributes {
    'align'?: string;
    'full'?: boolean;
  }

  interface StellarDropdown {
    'icon': boolean;
    'label': string;
    'open': boolean;
    'position': "left"|"center"|"right";
  }
  interface StellarDropdownAttributes extends StencilHTMLAttributes {
    'icon'?: boolean;
    'label'?: string;
    'open'?: boolean;
    'position'?: "left"|"center"|"right";
  }

  interface StellarGrid {
    'align': string;
    'cols': number|string;
    'compact': boolean;
    'padding': boolean;
    'refresh': () => Promise<void>;
    'responsive': boolean|string;
    'swappable': boolean;
    'swappableSelector': string;
  }
  interface StellarGridAttributes extends StencilHTMLAttributes {
    'align'?: string;
    'cols'?: number|string;
    'compact'?: boolean;
    'onOrderChanged'?: (event: CustomEvent) => void;
    'padding'?: boolean;
    'responsive'?: boolean|string;
    'swappable'?: boolean;
    'swappableSelector'?: string;
  }

  interface StellarGroupOverflow {
    'count': number;
    'size': string;
  }
  interface StellarGroupOverflowAttributes extends StencilHTMLAttributes {
    'count'?: number;
    'size'?: string;
  }

  interface StellarGroup {
    'count': number;
    'overflow': boolean;
    'size': string;
  }
  interface StellarGroupAttributes extends StencilHTMLAttributes {
    'count'?: number;
    'overflow'?: boolean;
    'size'?: string;
  }

  interface StellarImage {
    'bg': string;
    'height': number;
    'medium': () => Promise<any>;
    'nozoom': boolean;
    'poster': string;
    'width': number;
  }
  interface StellarImageAttributes extends StencilHTMLAttributes {
    'bg'?: string;
    'height'?: number;
    'nozoom'?: boolean;
    'poster'?: string;
    'width'?: number;
  }

  interface StellarItem {
    'apply': (data: any) => Promise<void>;
    'danger': boolean;
    'data': () => Promise<{ size: string; value: string; type: "stencil-route-link" | "a" | "button"; label: string; danger: boolean; slotted: any; }>;
    'fit': boolean;
    'focused': boolean;
    'history': RouterHistory;
    'href': string;
    'label': string;
    'location': LocationSegments;
    'multiple': boolean;
    'route': boolean;
    'select_item': (state?: { selected: boolean; }) => void;
    'selectable': boolean;
    'selected': boolean;
    'setFocus': () => Promise<void>;
    'simple': boolean;
    'size': string;
    'type': "a"|"button"|"stencil-route-link";
    'value': string;
    'valueLabel': string;
    'wrap': boolean;
  }
  interface StellarItemAttributes extends StencilHTMLAttributes {
    'danger'?: boolean;
    'fit'?: boolean;
    'focused'?: boolean;
    'history'?: RouterHistory;
    'href'?: string;
    'label'?: string;
    'location'?: LocationSegments;
    'multiple'?: boolean;
    'onBlurChanged'?: (event: CustomEvent) => void;
    'onFocusChanged'?: (event: CustomEvent) => void;
    'onMounted'?: (event: CustomEvent) => void;
    'onSelectionChanged'?: (event: CustomEvent) => void;
    'route'?: boolean;
    'selectable'?: boolean;
    'selected'?: boolean;
    'simple'?: boolean;
    'size'?: string;
    'type'?: "a"|"button"|"stencil-route-link";
    'value'?: string;
    'valueLabel'?: string;
    'wrap'?: boolean;
  }

  interface StellarLabel {
    'for': string;
    'size': string;
    'underneath': boolean;
  }
  interface StellarLabelAttributes extends StencilHTMLAttributes {
    'for'?: string;
    'size'?: string;
    'underneath'?: boolean;
  }

  interface StellarLayout {
    'align': "baseline"|"center"|"top"|"bottom";
    'padding': "none"|"tiny"|"small"|"medium"|"large";
    'refresh': () => void;
    'size': "tiny"|"small"|"medium"|"large"|"full"|"flush";
    'type': string;
  }
  interface StellarLayoutAttributes extends StencilHTMLAttributes {
    'align'?: "baseline"|"center"|"top"|"bottom";
    'padding'?: "none"|"tiny"|"small"|"medium"|"large";
    'size'?: "tiny"|"small"|"medium"|"large"|"full"|"flush";
    'type'?: string;
  }

  interface StellarPagination {
    'color': string;
    'current': number;
    'padding': number;
    /**
    * Public: Sets the max cap of pages you can skip through
    */
    'pages': number;
    'type': "full"|"compact";
    'url': any;
  }
  interface StellarPaginationAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'current'?: number;
    'onChanged'?: (event: CustomEvent) => void;
    'padding'?: number;
    /**
    * Public: Sets the max cap of pages you can skip through
    */
    'pages'?: number;
    'type'?: "full"|"compact";
    'url'?: any;
  }

  interface StellarProgress {
    'blurable': boolean;
    /**
    * Allows the progress bar to be clicked on, to help the user to navigate through the progressing content.
    */
    'editable': boolean;
    /**
    * Sets the maximum cap for steps in the progress bar
    */
    'max': number;
    /**
    * eliminates the easing in the css so you can apply value updates without jitter.
    */
    'noease': boolean;
    /**
    * eliminates the easing in the css so you can apply value updates without jitter.
    */
    'rounded': boolean;
    /**
    * Renders if this element is slender or not
    */
    'slender': boolean;
    /**
    * Sets the value of the progress bar
    */
    'value': number;
  }
  interface StellarProgressAttributes extends StencilHTMLAttributes {
    'blurable'?: boolean;
    /**
    * Allows the progress bar to be clicked on, to help the user to navigate through the progressing content.
    */
    'editable'?: boolean;
    /**
    * Sets the maximum cap for steps in the progress bar
    */
    'max'?: number;
    /**
    * eliminates the easing in the css so you can apply value updates without jitter.
    */
    'noease'?: boolean;
    'onValueChange'?: (event: CustomEvent) => void;
    /**
    * eliminates the easing in the css so you can apply value updates without jitter.
    */
    'rounded'?: boolean;
    /**
    * Renders if this element is slender or not
    */
    'slender'?: boolean;
    /**
    * Sets the value of the progress bar
    */
    'value'?: number;
  }

  interface StellarReveal {
    'active': boolean;
    'animation': "fadeIn"|"fadeInUp"|"fadeInDown";
    'delay': number;
    'in': () => Promise<void>;
    'out': () => Promise<void>;
    'outAnimation': "fadeOut"|"fadeOutUp"|"fadeOutDown";
    'timing': number;
  }
  interface StellarRevealAttributes extends StencilHTMLAttributes {
    'active'?: boolean;
    'animation'?: "fadeIn"|"fadeInUp"|"fadeInDown";
    'delay'?: number;
    'outAnimation'?: "fadeOut"|"fadeOutUp"|"fadeOutDown";
    'timing'?: number;
  }

  interface StellarScatter {
    'colors': boolean;
    'float': boolean;
    'max': number;
    'min': number;
    'sizes': boolean;
  }
  interface StellarScatterAttributes extends StencilHTMLAttributes {
    'colors'?: boolean;
    'float'?: boolean;
    'max'?: number;
    'min'?: number;
    'sizes'?: boolean;
  }

  interface StellarTab {
    'disabled': boolean;
    'href': string;
    'notifications': boolean|number;
    'open': boolean;
    'order': number;
    'tabCount': number;
    'tag': string;
  }
  interface StellarTabAttributes extends StencilHTMLAttributes {
    'disabled'?: boolean;
    'href'?: string;
    'notifications'?: boolean|number;
    'onContentChange'?: (event: CustomEvent) => void;
    'open'?: boolean;
    'order'?: number;
    'tabCount'?: number;
    'tag'?: string;
  }

  interface StellarTabs {
    'behavior': string;
    'block': boolean;
    'blurring': () => void;
    'contents': () => Promise<any[]>;
    'height': string;
    'name': string;
    'noanimation': boolean;
    'size': string|"tiny"|"small"|"medium"|"large";
    'tabs': () => Promise<any[]>;
    'vertical': boolean;
  }
  interface StellarTabsAttributes extends StencilHTMLAttributes {
    'behavior'?: string;
    'block'?: boolean;
    'height'?: string;
    'name'?: string;
    'noanimation'?: boolean;
    'size'?: string|"tiny"|"small"|"medium"|"large";
    'vertical'?: boolean;
  }

  interface StellarTag {
    'color': string;
    'outline': boolean;
    'pill': boolean;
    'size': string;
    'textColor': string;
  }
  interface StellarTagAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'outline'?: boolean;
    'pill'?: boolean;
    'size'?: string;
    'textColor'?: string;
  }

  interface StellarTooltip {
    'align': "left"|"center"|"right";
  }
  interface StellarTooltipAttributes extends StencilHTMLAttributes {
    'align'?: "left"|"center"|"right";
  }
}

declare global {
  interface StencilElementInterfaces {
    'StellarAccordion': Components.StellarAccordion;
    'StellarAsset': Components.StellarAsset;
    'StellarAvatar': Components.StellarAvatar;
    'StellarBlur': Components.StellarBlur;
    'StellarBreadcrumb': Components.StellarBreadcrumb;
    'StellarBreadcrumbs': Components.StellarBreadcrumbs;
    'StellarButton': Components.StellarButton;
    'StellarCallout': Components.StellarCallout;
    'StellarCard': Components.StellarCard;
    'StellarChart': Components.StellarChart;
    'StellarCode': Components.StellarCode;
    'StellarColorPicker': Components.StellarColorPicker;
    'StellarComment': Components.StellarComment;
    'StellarComments': Components.StellarComments;
    'StellarContent': Components.StellarContent;
    'CopyWrap': Components.CopyWrap;
    'StellarDropdown': Components.StellarDropdown;
    'StellarGrid': Components.StellarGrid;
    'StellarGroupOverflow': Components.StellarGroupOverflow;
    'StellarGroup': Components.StellarGroup;
    'StellarImage': Components.StellarImage;
    'StellarItem': Components.StellarItem;
    'StellarLabel': Components.StellarLabel;
    'StellarLayout': Components.StellarLayout;
    'StellarPagination': Components.StellarPagination;
    'StellarProgress': Components.StellarProgress;
    'StellarReveal': Components.StellarReveal;
    'StellarScatter': Components.StellarScatter;
    'StellarTab': Components.StellarTab;
    'StellarTabs': Components.StellarTabs;
    'StellarTag': Components.StellarTag;
    'StellarTooltip': Components.StellarTooltip;
  }

  interface StencilIntrinsicElements {
    'stellar-accordion': Components.StellarAccordionAttributes;
    'stellar-asset': Components.StellarAssetAttributes;
    'stellar-avatar': Components.StellarAvatarAttributes;
    'stellar-blur': Components.StellarBlurAttributes;
    'stellar-breadcrumb': Components.StellarBreadcrumbAttributes;
    'stellar-breadcrumbs': Components.StellarBreadcrumbsAttributes;
    'stellar-button': Components.StellarButtonAttributes;
    'stellar-callout': Components.StellarCalloutAttributes;
    'stellar-card': Components.StellarCardAttributes;
    'stellar-chart': Components.StellarChartAttributes;
    'stellar-code': Components.StellarCodeAttributes;
    'stellar-color-picker': Components.StellarColorPickerAttributes;
    'stellar-comment': Components.StellarCommentAttributes;
    'stellar-comments': Components.StellarCommentsAttributes;
    'stellar-content': Components.StellarContentAttributes;
    'copy-wrap': Components.CopyWrapAttributes;
    'stellar-dropdown': Components.StellarDropdownAttributes;
    'stellar-grid': Components.StellarGridAttributes;
    'stellar-group-overflow': Components.StellarGroupOverflowAttributes;
    'stellar-group': Components.StellarGroupAttributes;
    'stellar-image': Components.StellarImageAttributes;
    'stellar-item': Components.StellarItemAttributes;
    'stellar-label': Components.StellarLabelAttributes;
    'stellar-layout': Components.StellarLayoutAttributes;
    'stellar-pagination': Components.StellarPaginationAttributes;
    'stellar-progress': Components.StellarProgressAttributes;
    'stellar-reveal': Components.StellarRevealAttributes;
    'stellar-scatter': Components.StellarScatterAttributes;
    'stellar-tab': Components.StellarTabAttributes;
    'stellar-tabs': Components.StellarTabsAttributes;
    'stellar-tag': Components.StellarTagAttributes;
    'stellar-tooltip': Components.StellarTooltipAttributes;
  }


  interface HTMLStellarAccordionElement extends Components.StellarAccordion, HTMLStencilElement {}
  var HTMLStellarAccordionElement: {
    prototype: HTMLStellarAccordionElement;
    new (): HTMLStellarAccordionElement;
  };

  interface HTMLStellarAssetElement extends Components.StellarAsset, HTMLStencilElement {}
  var HTMLStellarAssetElement: {
    prototype: HTMLStellarAssetElement;
    new (): HTMLStellarAssetElement;
  };

  interface HTMLStellarAvatarElement extends Components.StellarAvatar, HTMLStencilElement {}
  var HTMLStellarAvatarElement: {
    prototype: HTMLStellarAvatarElement;
    new (): HTMLStellarAvatarElement;
  };

  interface HTMLStellarBlurElement extends Components.StellarBlur, HTMLStencilElement {}
  var HTMLStellarBlurElement: {
    prototype: HTMLStellarBlurElement;
    new (): HTMLStellarBlurElement;
  };

  interface HTMLStellarBreadcrumbElement extends Components.StellarBreadcrumb, HTMLStencilElement {}
  var HTMLStellarBreadcrumbElement: {
    prototype: HTMLStellarBreadcrumbElement;
    new (): HTMLStellarBreadcrumbElement;
  };

  interface HTMLStellarBreadcrumbsElement extends Components.StellarBreadcrumbs, HTMLStencilElement {}
  var HTMLStellarBreadcrumbsElement: {
    prototype: HTMLStellarBreadcrumbsElement;
    new (): HTMLStellarBreadcrumbsElement;
  };

  interface HTMLStellarButtonElement extends Components.StellarButton, HTMLStencilElement {}
  var HTMLStellarButtonElement: {
    prototype: HTMLStellarButtonElement;
    new (): HTMLStellarButtonElement;
  };

  interface HTMLStellarCalloutElement extends Components.StellarCallout, HTMLStencilElement {}
  var HTMLStellarCalloutElement: {
    prototype: HTMLStellarCalloutElement;
    new (): HTMLStellarCalloutElement;
  };

  interface HTMLStellarCardElement extends Components.StellarCard, HTMLStencilElement {}
  var HTMLStellarCardElement: {
    prototype: HTMLStellarCardElement;
    new (): HTMLStellarCardElement;
  };

  interface HTMLStellarChartElement extends Components.StellarChart, HTMLStencilElement {}
  var HTMLStellarChartElement: {
    prototype: HTMLStellarChartElement;
    new (): HTMLStellarChartElement;
  };

  interface HTMLStellarCodeElement extends Components.StellarCode, HTMLStencilElement {}
  var HTMLStellarCodeElement: {
    prototype: HTMLStellarCodeElement;
    new (): HTMLStellarCodeElement;
  };

  interface HTMLStellarColorPickerElement extends Components.StellarColorPicker, HTMLStencilElement {}
  var HTMLStellarColorPickerElement: {
    prototype: HTMLStellarColorPickerElement;
    new (): HTMLStellarColorPickerElement;
  };

  interface HTMLStellarCommentElement extends Components.StellarComment, HTMLStencilElement {}
  var HTMLStellarCommentElement: {
    prototype: HTMLStellarCommentElement;
    new (): HTMLStellarCommentElement;
  };

  interface HTMLStellarCommentsElement extends Components.StellarComments, HTMLStencilElement {}
  var HTMLStellarCommentsElement: {
    prototype: HTMLStellarCommentsElement;
    new (): HTMLStellarCommentsElement;
  };

  interface HTMLStellarContentElement extends Components.StellarContent, HTMLStencilElement {}
  var HTMLStellarContentElement: {
    prototype: HTMLStellarContentElement;
    new (): HTMLStellarContentElement;
  };

  interface HTMLCopyWrapElement extends Components.CopyWrap, HTMLStencilElement {}
  var HTMLCopyWrapElement: {
    prototype: HTMLCopyWrapElement;
    new (): HTMLCopyWrapElement;
  };

  interface HTMLStellarDropdownElement extends Components.StellarDropdown, HTMLStencilElement {}
  var HTMLStellarDropdownElement: {
    prototype: HTMLStellarDropdownElement;
    new (): HTMLStellarDropdownElement;
  };

  interface HTMLStellarGridElement extends Components.StellarGrid, HTMLStencilElement {}
  var HTMLStellarGridElement: {
    prototype: HTMLStellarGridElement;
    new (): HTMLStellarGridElement;
  };

  interface HTMLStellarGroupOverflowElement extends Components.StellarGroupOverflow, HTMLStencilElement {}
  var HTMLStellarGroupOverflowElement: {
    prototype: HTMLStellarGroupOverflowElement;
    new (): HTMLStellarGroupOverflowElement;
  };

  interface HTMLStellarGroupElement extends Components.StellarGroup, HTMLStencilElement {}
  var HTMLStellarGroupElement: {
    prototype: HTMLStellarGroupElement;
    new (): HTMLStellarGroupElement;
  };

  interface HTMLStellarImageElement extends Components.StellarImage, HTMLStencilElement {}
  var HTMLStellarImageElement: {
    prototype: HTMLStellarImageElement;
    new (): HTMLStellarImageElement;
  };

  interface HTMLStellarItemElement extends Components.StellarItem, HTMLStencilElement {}
  var HTMLStellarItemElement: {
    prototype: HTMLStellarItemElement;
    new (): HTMLStellarItemElement;
  };

  interface HTMLStellarLabelElement extends Components.StellarLabel, HTMLStencilElement {}
  var HTMLStellarLabelElement: {
    prototype: HTMLStellarLabelElement;
    new (): HTMLStellarLabelElement;
  };

  interface HTMLStellarLayoutElement extends Components.StellarLayout, HTMLStencilElement {}
  var HTMLStellarLayoutElement: {
    prototype: HTMLStellarLayoutElement;
    new (): HTMLStellarLayoutElement;
  };

  interface HTMLStellarPaginationElement extends Components.StellarPagination, HTMLStencilElement {}
  var HTMLStellarPaginationElement: {
    prototype: HTMLStellarPaginationElement;
    new (): HTMLStellarPaginationElement;
  };

  interface HTMLStellarProgressElement extends Components.StellarProgress, HTMLStencilElement {}
  var HTMLStellarProgressElement: {
    prototype: HTMLStellarProgressElement;
    new (): HTMLStellarProgressElement;
  };

  interface HTMLStellarRevealElement extends Components.StellarReveal, HTMLStencilElement {}
  var HTMLStellarRevealElement: {
    prototype: HTMLStellarRevealElement;
    new (): HTMLStellarRevealElement;
  };

  interface HTMLStellarScatterElement extends Components.StellarScatter, HTMLStencilElement {}
  var HTMLStellarScatterElement: {
    prototype: HTMLStellarScatterElement;
    new (): HTMLStellarScatterElement;
  };

  interface HTMLStellarTabElement extends Components.StellarTab, HTMLStencilElement {}
  var HTMLStellarTabElement: {
    prototype: HTMLStellarTabElement;
    new (): HTMLStellarTabElement;
  };

  interface HTMLStellarTabsElement extends Components.StellarTabs, HTMLStencilElement {}
  var HTMLStellarTabsElement: {
    prototype: HTMLStellarTabsElement;
    new (): HTMLStellarTabsElement;
  };

  interface HTMLStellarTagElement extends Components.StellarTag, HTMLStencilElement {}
  var HTMLStellarTagElement: {
    prototype: HTMLStellarTagElement;
    new (): HTMLStellarTagElement;
  };

  interface HTMLStellarTooltipElement extends Components.StellarTooltip, HTMLStencilElement {}
  var HTMLStellarTooltipElement: {
    prototype: HTMLStellarTooltipElement;
    new (): HTMLStellarTooltipElement;
  };

  interface HTMLElementTagNameMap {
    'stellar-accordion': HTMLStellarAccordionElement
    'stellar-asset': HTMLStellarAssetElement
    'stellar-avatar': HTMLStellarAvatarElement
    'stellar-blur': HTMLStellarBlurElement
    'stellar-breadcrumb': HTMLStellarBreadcrumbElement
    'stellar-breadcrumbs': HTMLStellarBreadcrumbsElement
    'stellar-button': HTMLStellarButtonElement
    'stellar-callout': HTMLStellarCalloutElement
    'stellar-card': HTMLStellarCardElement
    'stellar-chart': HTMLStellarChartElement
    'stellar-code': HTMLStellarCodeElement
    'stellar-color-picker': HTMLStellarColorPickerElement
    'stellar-comment': HTMLStellarCommentElement
    'stellar-comments': HTMLStellarCommentsElement
    'stellar-content': HTMLStellarContentElement
    'copy-wrap': HTMLCopyWrapElement
    'stellar-dropdown': HTMLStellarDropdownElement
    'stellar-grid': HTMLStellarGridElement
    'stellar-group-overflow': HTMLStellarGroupOverflowElement
    'stellar-group': HTMLStellarGroupElement
    'stellar-image': HTMLStellarImageElement
    'stellar-item': HTMLStellarItemElement
    'stellar-label': HTMLStellarLabelElement
    'stellar-layout': HTMLStellarLayoutElement
    'stellar-pagination': HTMLStellarPaginationElement
    'stellar-progress': HTMLStellarProgressElement
    'stellar-reveal': HTMLStellarRevealElement
    'stellar-scatter': HTMLStellarScatterElement
    'stellar-tab': HTMLStellarTabElement
    'stellar-tabs': HTMLStellarTabsElement
    'stellar-tag': HTMLStellarTagElement
    'stellar-tooltip': HTMLStellarTooltipElement
  }

  interface ElementTagNameMap {
    'stellar-accordion': HTMLStellarAccordionElement;
    'stellar-asset': HTMLStellarAssetElement;
    'stellar-avatar': HTMLStellarAvatarElement;
    'stellar-blur': HTMLStellarBlurElement;
    'stellar-breadcrumb': HTMLStellarBreadcrumbElement;
    'stellar-breadcrumbs': HTMLStellarBreadcrumbsElement;
    'stellar-button': HTMLStellarButtonElement;
    'stellar-callout': HTMLStellarCalloutElement;
    'stellar-card': HTMLStellarCardElement;
    'stellar-chart': HTMLStellarChartElement;
    'stellar-code': HTMLStellarCodeElement;
    'stellar-color-picker': HTMLStellarColorPickerElement;
    'stellar-comment': HTMLStellarCommentElement;
    'stellar-comments': HTMLStellarCommentsElement;
    'stellar-content': HTMLStellarContentElement;
    'copy-wrap': HTMLCopyWrapElement;
    'stellar-dropdown': HTMLStellarDropdownElement;
    'stellar-grid': HTMLStellarGridElement;
    'stellar-group-overflow': HTMLStellarGroupOverflowElement;
    'stellar-group': HTMLStellarGroupElement;
    'stellar-image': HTMLStellarImageElement;
    'stellar-item': HTMLStellarItemElement;
    'stellar-label': HTMLStellarLabelElement;
    'stellar-layout': HTMLStellarLayoutElement;
    'stellar-pagination': HTMLStellarPaginationElement;
    'stellar-progress': HTMLStellarProgressElement;
    'stellar-reveal': HTMLStellarRevealElement;
    'stellar-scatter': HTMLStellarScatterElement;
    'stellar-tab': HTMLStellarTabElement;
    'stellar-tabs': HTMLStellarTabsElement;
    'stellar-tag': HTMLStellarTagElement;
    'stellar-tooltip': HTMLStellarTooltipElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
