/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';

import 'ionicons';


export namespace Components {

  interface StellarAsset {
    'align': string;
    'ariaLabel': string;
    'block': boolean;
    'language': string;
    'name': string;
    'src': string;
  }
  interface StellarAssetAttributes extends StencilHTMLAttributes {
    'align'?: string;
    'ariaLabel'?: string;
    'block'?: boolean;
    'language'?: string;
    'name'?: string;
    'src'?: string;
  }

  interface StellarAvatar {
    'color': string;
    'initials': string;
    'name': string;
    'processing': boolean;
    'shape': "circle"|"square"|"rectangle"|"diamond"|"hexagon"|"star"|"message";
    'size': string;
    'src': string;
    'tooltip': boolean;
  }
  interface StellarAvatarAttributes extends StencilHTMLAttributes {
    'color'?: string;
    'initials'?: string;
    'name'?: string;
    'processing'?: boolean;
    'shape'?: "circle"|"square"|"rectangle"|"diamond"|"hexagon"|"star"|"message";
    'size'?: string;
    'src'?: string;
    'tooltip'?: boolean;
  }

  interface StellarButton {
    /**
    * Sets the button or link as an active state.
    */
    'active': boolean;
    /**
    * Sets the button or link to render at full width to the parent.
    */
    'block': boolean;
    /**
    * Sets the button or link to provide the affordance of a dangerous action.
    */
    'danger': boolean;
    /**
    * Sets the button or link as disabled and not-interactable.
    */
    'disabled': boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for': string;
    'ghost': boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'href': string;
    /**
    * Sets the button or link as a button with only an icon.
    */
    'icon': boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'invert': boolean;
    /**
    * Sets accessibility options on the buttons
    */
    'label': string;
    /**
    * Sets the name on the button if the button is an input. Allows the button to act as an item in a form.
    */
    'name': string;
    /**
    * Sets the button or link as an outlined button.
    */
    'outline': boolean;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding': string|"small"|"medium"|"large";
    /**
    * Sets the button or link to render as a pill.
    */
    'pill': boolean;
    /**
    * Sets the button or link as processing when clicked.
    */
    'processable': boolean;
    /**
    * Sets the size of the button. Can be tiny, small, medium, or large.
    */
    'size': string|"tiny"|"small"|"medium"|"large";
    /**
    * Allows the button to render for different tags.
    */
    'tag': "button"|"submit"|"link"|"span"|"route-link";
    /**
    * Sets the target on the anchor tag if the button is a link.
    */
    'target': string;
    /**
    * Sets the value on the button if the button is an input.
    */
    'value': string;
  }
  interface StellarButtonAttributes extends StencilHTMLAttributes {
    /**
    * Sets the button or link as an active state.
    */
    'active'?: boolean;
    /**
    * Sets the button or link to render at full width to the parent.
    */
    'block'?: boolean;
    /**
    * Sets the button or link to provide the affordance of a dangerous action.
    */
    'danger'?: boolean;
    /**
    * Sets the button or link as disabled and not-interactable.
    */
    'disabled'?: boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for'?: string;
    'ghost'?: boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'href'?: string;
    /**
    * Sets the button or link as a button with only an icon.
    */
    'icon'?: boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'invert'?: boolean;
    /**
    * Sets accessibility options on the buttons
    */
    'label'?: string;
    /**
    * Sets the name on the button if the button is an input. Allows the button to act as an item in a form.
    */
    'name'?: string;
    /**
    * Sets the button or link as an outlined button.
    */
    'outline'?: boolean;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding'?: string|"small"|"medium"|"large";
    /**
    * Sets the button or link to render as a pill.
    */
    'pill'?: boolean;
    /**
    * Sets the button or link as processing when clicked.
    */
    'processable'?: boolean;
    /**
    * Sets the size of the button. Can be tiny, small, medium, or large.
    */
    'size'?: string|"tiny"|"small"|"medium"|"large";
    /**
    * Allows the button to render for different tags.
    */
    'tag'?: "button"|"submit"|"link"|"span"|"route-link";
    /**
    * Sets the target on the anchor tag if the button is a link.
    */
    'target'?: string;
    /**
    * Sets the value on the button if the button is an input.
    */
    'value'?: string;
  }

  interface StellarCard {
    'flip_card': (e?: UIEvent) => Promise<void>;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'flip_icon': string;
    /**
    * Let's a card be flippable
    */
    'flippable': boolean;
    /**
    * Renders a flipped card
    */
    'flipped': boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for': string;
    /**
    * Sets the href if the card is a link.
    */
    'href': string;
    /**
    * Sets the name if the card is a button.
    */
    'name': string;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding': string|"small"|"medium"|"large";
    /**
    * Renders a shadow on the card
    */
    'shadow': string|"light"|"medium"|"heavy";
    /**
    * Sets the element to render the card as - an anchor tag, a button, or a div.
    */
    'tag': "stencil-route-link"|"a"|"button"|"div";
    'transition': boolean;
    /**
    * Sets the element to render the card as - an anchor tag, a button, or a div.
    */
    'type': string;
    /**
    * Sets the value if the card is a button.
    */
    'value': string;
  }
  interface StellarCardAttributes extends StencilHTMLAttributes {
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'flip_icon'?: string;
    /**
    * Let's a card be flippable
    */
    'flippable'?: boolean;
    /**
    * Renders a flipped card
    */
    'flipped'?: boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for'?: string;
    /**
    * Sets the href if the card is a link.
    */
    'href'?: string;
    /**
    * Sets the name if the card is a button.
    */
    'name'?: string;
    'onFlip'?: (event: CustomEvent) => void;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding'?: string|"small"|"medium"|"large";
    /**
    * Renders a shadow on the card
    */
    'shadow'?: string|"light"|"medium"|"heavy";
    /**
    * Sets the element to render the card as - an anchor tag, a button, or a div.
    */
    'tag'?: "stencil-route-link"|"a"|"button"|"div";
    'transition'?: boolean;
    /**
    * Sets the element to render the card as - an anchor tag, a button, or a div.
    */
    'type'?: string;
    /**
    * Sets the value if the card is a button.
    */
    'value'?: string;
  }

  interface StellarGrid {
    'align': string;
    'cols': number|string;
    'compact': boolean;
    'padding': boolean;
    'refresh': () => Promise<void>;
    'responsive': boolean|string;
    'swappable': boolean;
    'swappableSelector': string;
  }
  interface StellarGridAttributes extends StencilHTMLAttributes {
    'align'?: string;
    'cols'?: number|string;
    'compact'?: boolean;
    'onOrderChanged'?: (event: CustomEvent) => void;
    'padding'?: boolean;
    'responsive'?: boolean|string;
    'swappable'?: boolean;
    'swappableSelector'?: string;
  }

  interface StellarTooltip {
    'align': "left"|"center"|"right";
  }
  interface StellarTooltipAttributes extends StencilHTMLAttributes {
    'align'?: "left"|"center"|"right";
  }
}

declare global {
  interface StencilElementInterfaces {
    'StellarAsset': Components.StellarAsset;
    'StellarAvatar': Components.StellarAvatar;
    'StellarButton': Components.StellarButton;
    'StellarCard': Components.StellarCard;
    'StellarGrid': Components.StellarGrid;
    'StellarTooltip': Components.StellarTooltip;
  }

  interface StencilIntrinsicElements {
    'stellar-asset': Components.StellarAssetAttributes;
    'stellar-avatar': Components.StellarAvatarAttributes;
    'stellar-button': Components.StellarButtonAttributes;
    'stellar-card': Components.StellarCardAttributes;
    'stellar-grid': Components.StellarGridAttributes;
    'stellar-tooltip': Components.StellarTooltipAttributes;
  }


  interface HTMLStellarAssetElement extends Components.StellarAsset, HTMLStencilElement {}
  var HTMLStellarAssetElement: {
    prototype: HTMLStellarAssetElement;
    new (): HTMLStellarAssetElement;
  };

  interface HTMLStellarAvatarElement extends Components.StellarAvatar, HTMLStencilElement {}
  var HTMLStellarAvatarElement: {
    prototype: HTMLStellarAvatarElement;
    new (): HTMLStellarAvatarElement;
  };

  interface HTMLStellarButtonElement extends Components.StellarButton, HTMLStencilElement {}
  var HTMLStellarButtonElement: {
    prototype: HTMLStellarButtonElement;
    new (): HTMLStellarButtonElement;
  };

  interface HTMLStellarCardElement extends Components.StellarCard, HTMLStencilElement {}
  var HTMLStellarCardElement: {
    prototype: HTMLStellarCardElement;
    new (): HTMLStellarCardElement;
  };

  interface HTMLStellarGridElement extends Components.StellarGrid, HTMLStencilElement {}
  var HTMLStellarGridElement: {
    prototype: HTMLStellarGridElement;
    new (): HTMLStellarGridElement;
  };

  interface HTMLStellarTooltipElement extends Components.StellarTooltip, HTMLStencilElement {}
  var HTMLStellarTooltipElement: {
    prototype: HTMLStellarTooltipElement;
    new (): HTMLStellarTooltipElement;
  };

  interface HTMLElementTagNameMap {
    'stellar-asset': HTMLStellarAssetElement
    'stellar-avatar': HTMLStellarAvatarElement
    'stellar-button': HTMLStellarButtonElement
    'stellar-card': HTMLStellarCardElement
    'stellar-grid': HTMLStellarGridElement
    'stellar-tooltip': HTMLStellarTooltipElement
  }

  interface ElementTagNameMap {
    'stellar-asset': HTMLStellarAssetElement;
    'stellar-avatar': HTMLStellarAvatarElement;
    'stellar-button': HTMLStellarButtonElement;
    'stellar-card': HTMLStellarCardElement;
    'stellar-grid': HTMLStellarGridElement;
    'stellar-tooltip': HTMLStellarTooltipElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
